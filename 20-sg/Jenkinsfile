pipeline {
    agent {
        label 'AGENT-1' 
    }
    options{
         timeout(time: 30, unit: 'MINUTES')
         disableConcurrentBuilds()
         ansiColor('xterm')
    }
    parameters {
        choice(name: 'ACTION', choices: ['Apply', 'Destroy'], description: 'Pick something') 
    }
    stages {
        stage('init and Plan') {
            steps {
                withAWS(region:'us-east-1', credentials: "aws-configure") {

                sh """
                cd 20-sg
                terraform init -reconfigure
                terraform plan -out=tfplan 
                """
                }
            }
        }
        stage('Apply or Destroy') {
              input {
                message "Should we continue?"
                ok "Yes, we should."
              }
            steps {
                 withAWS(region:'us-east-1', credentials: "aws-configure") {
                sh """
                cd 20-sg
                if [ ${params.ACTION} == 'Apply' ]
                then
                terraform apply -auto-approve tfplan
                elif [ ${params.ACTION} == 'Destroy' ]
                then
                terraform destroy -auto-approve
                fi

                """
                 }
            }
        }
      

       stage ('triggering VPC') {
             when {
                expression { params.ACTION == 'Destroy' }
            }
            steps{
                     build job: '30-bastion', parameters: [string(name: 'ACTION', value: "Apply")], wait: false
            }
              
        }
     stage ('parlell-1') {
        
            parallel {
            stage ('bastion') {
                when {
                     expression { params.ACTION == 'Apply' }
                }
                 steps {
                     build job: '30-bastion', parameters: [string(name: 'ACTION', value: "Apply")], wait: false
                }
              
               }
             stage ('EKS') {
                when {
                     expression { params.ACTION == 'Apply' }
                }
                 steps {
                     build job: '40-eks', parameters: [string(name: 'ACTION', value: "Apply")], wait: false
                }
              
               }
                stage ('ECR') {
                when {
                     expression { params.ACTION == 'Apply' }
                }
                 steps {
                     build job: '70-ecr', parameters: [string(name: 'ACTION', value: "Apply")], wait: false
                }
              
               }
            }
     }
            stage ('sequential') {
                when {
                        expression { params.ACTION == 'Apply' }
                    }
                stages{
                  stage ('ACM') {
                    steps {
                        build job: '50-acm', parameters: [string(name: 'ACTION', value: "Apply")]
                    }
                 }
                 stage ('ALB') {
                    steps {
                        build job: '60-alb', parameters: [string(name: 'ACTION', value: "Apply")], wait: false
                    }
                 }
                 stage ('CDN') {
                    steps {
                        build job: '80-cdn', parameters: [string(name: 'ACTION', value: "Apply")], wait: false
                    }
                 }
               }
                
            }
        }

        
        // stage('Deploy') {
        //     when {     
        //          expression {
        //            env.GIT_BRANCH = 'origin/main'  
        //         }
        //     }
        //     steps {
        //          sh "echo this is Deploy stage1"
        //     }
        // }
        
    
    
    post {
        always{
            echo " this is always block  "
            deleteDir()
        }
        success{
            echo " this is success block  "
        }
        failure{
            echo " this is failure block  "
        }
    }
}